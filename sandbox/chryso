#!/usr/bin/python
import ccxt
import os
import pandas as pd
import pytz
import time
import smtplib
import sys

from dives.periodical import LatestSignals
from garm.data_sources import LiveSource
from ccxt.base.errors import RequestTimeout

class SignalChecker(object):
    def __init__(self, market_file, data_dir):
        self.threshold_task = LatestSignals(markets=market_file,
                                            period="1h",
                                            destination_path=data_dir)
        self.threshold_df = None
        self.last_threshold_path = ""

    def fetch_thresholds(self):
        threshold_path = self.threshold_task.output().next().path
        if self.last_threshold_path != threshold_path:
            if os.path.exists(threshold_path):
                tmp_df = pd.read_csv(threshold_path, parse_dates=True)
                self.threshold_df = tmp_df.set_index(["exchange", "pair"])
                self.last_threshold_path = threshold_path
        return self.threshold_df

    def check(self, price_row):
        self.fetch_thresholds()
        if self.threshold_df is None:
            return None
        th_row = self.threshold_df.loc[price_row.exchange, price_row.pair]
        signal_row = dict(time=price_row.time,
                          pair=price_row.pair,
                          exchange=price_row.exchange,
                          period=th_row.period,
                          price=price_row.price)
        for prefix in ["long_entry", "long_exit",
                       "short_entry", "short_exit"]:
            s_value = getattr(th_row, "{}_value".format(prefix))
            s_type = getattr(th_row, "{}_type".format(prefix))
            print prefix, price_row.price, s_value, s_type
            signal = False
            if s_type == "price_gt":
                signal = price_row.price > s_value
            elif s_type == "price_lt":
                signal = price_row.price < s_value
            signal_row["{}_signal".format(prefix)] = signal
        return pd.DataFrame([signal_row]).iloc[0]

if __name__ == "__main__":
    signal_checker = SignalChecker(sys.argv[1], sys.argv[2])
    for price_row in LiveSource(sys.argv[1], sys.argv[2]):
        print signal_checker.check(price_row)
